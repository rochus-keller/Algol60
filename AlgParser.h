#ifndef __ALG_PARSER__
#define __ALG_PARSER__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <Algol/AlgSynTree.h>

namespace Alg {

	class Scanner {
	public:
		virtual Token next() = 0;
		virtual Token peek(int offset) = 0;
	};

	class Parser {
	public:
		Parser(Scanner* s):scanner(s) {}
		void RunParser();
		SynTree root;
		struct Error {
		    QString msg;
		    int row, col;
		    QString path;
		    Error( const QString& m, int r, int c, const QString& p):msg(m),row(r),col(c),path(p){}
		};
		QList<Error> errors;
	protected:
		void program(SynTree*);
		void declarations_(SynTree*);
		void compoundBlock_(SynTree*);
		void statementList_(SynTree*);
		void compound_tail(SynTree*);
		void declaration(SynTree*);
		void type_declaration(SynTree*);
		void local_or_own_type(SynTree*);
		void type(SynTree*);
		void type_list(SynTree*);
		void array_declaration(SynTree*);
		void array_list(SynTree*);
		void array_segment(SynTree*);
		void bound_pair_list(SynTree*);
		void bound_pair(SynTree*);
		void upper_bound(SynTree*);
		void lower_bound(SynTree*);
		void switch_declaration(SynTree*);
		void switch_identifier(SynTree*);
		void switch_list(SynTree*);
		void procedure_declaration(SynTree*);
		void procedure_heading(SynTree*);
		void procedure_identifier(SynTree*);
		void formal_parameter_part(SynTree*);
		void formal_parameter_list(SynTree*);
		void formal_parameter(SynTree*);
		void value_part(SynTree*);
		void specification_part(SynTree*);
		void specifier(SynTree*);
		void identifier_list(SynTree*);
		void procedure_body(SynTree*);
		void statement(SynTree*);
		void unconditional_statement(SynTree*);
		void basic_statement(SynTree*);
		void label(SynTree*);
		void unlabelled_basic_statement(SynTree*);
		void procedureOrAssignmentStmt_(SynTree*);
		void go_to_statement(SynTree*);
		void actual_parameter_list(SynTree*);
		void parameter_delimiter(SynTree*);
		void actual_parameter(SynTree*);
		void conditional_statement(SynTree*);
		void if_clause(SynTree*);
		void for_statement(SynTree*);
		void for_clause(SynTree*);
		void for_list(SynTree*);
		void for_list_element(SynTree*);
		void expression(SynTree*);
		void arithmetic_expression(SynTree*);
		void simple_arithmetic_expression(SynTree*);
		void adding_operator(SynTree*);
		void term(SynTree*);
		void multiplying_operator(SynTree*);
		void factor(SynTree*);
		void power_sym_(SynTree*);
		void primary(SynTree*);
		void designational_expression(SynTree*);
		void simple_designational_expression(SynTree*);
		void Boolean_expression(SynTree*);
		void simple_Boolean(SynTree*);
		void equiv_sym_(SynTree*);
		void implication(SynTree*);
		void impl_sym_(SynTree*);
		void Boolean_term(SynTree*);
		void or_sym_(SynTree*);
		void Boolean_factor(SynTree*);
		void and_sym_(SynTree*);
		void Boolean_secondary(SynTree*);
		void not_sym_(SynTree*);
		void Boolean_primary(SynTree*);
		void relation(SynTree*);
		void relational_operator(SynTree*);
		void variableOrFunction_(SynTree*);
		void variable(SynTree*);
		void simple_variable(SynTree*);
		void variable_identifier(SynTree*);
		void subscript_list(SynTree*);
		void subscript_expression(SynTree*);
		void unsigned_number(SynTree*);
		void letter_string(SynTree*);
		void logical_value(SynTree*);
	protected:
		Token cur;
		Token la;
		Scanner* scanner;
		void next();
		Token peek(int off);
		void invalid(const char* what);
		bool expect(int tt, bool pkw, const char* where);
		void addTerminal(SynTree* st);
	};
}
#endif // include
