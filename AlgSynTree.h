#ifndef __ALG_SYNTREE__
#define __ALG_SYNTREE__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <Algol/AlgTokenType.h>
#include <Algol/AlgToken.h>
#include <QList>

namespace Alg {

	struct SynTree {
		enum ParserRule {
			R_First = TT_Max + 1,
			R_Boolean_expression,
			R_Boolean_factor,
			R_Boolean_primary,
			R_Boolean_secondary,
			R_Boolean_term,
			R_actual_parameter,
			R_actual_parameter_list,
			R_adding_operator,
			R_and_sym_,
			R_arithmetic_expression,
			R_array_declaration,
			R_array_list,
			R_array_segment,
			R_basic_statement,
			R_bound_pair,
			R_bound_pair_list,
			R_comment_,
			R_compoundBlock_,
			R_compound_tail,
			R_conditional_statement,
			R_declaration,
			R_designational_expression,
			R_equiv_sym_,
			R_expression,
			R_factor,
			R_for_clause,
			R_for_list,
			R_for_list_element,
			R_for_statement,
			R_formal_parameter,
			R_formal_parameter_list,
			R_formal_parameter_part,
			R_go_to_statement,
			R_identifier_list,
			R_if_clause,
			R_impl_sym_,
			R_implication,
			R_label,
			R_letter_string,
			R_local_or_own_type,
			R_logical_value,
			R_lower_bound,
			R_multiplying_operator,
			R_not_sym_,
			R_or_sym_,
			R_parameter_delimiter,
			R_power_sym_,
			R_primary,
			R_procedureOrAssignmentStmt_,
			R_procedure_body,
			R_procedure_declaration,
			R_procedure_heading,
			R_procedure_identifier,
			R_program,
			R_relation,
			R_relational_operator,
			R_simple_Boolean,
			R_simple_arithmetic_expression,
			R_simple_designational_expression,
			R_simple_variable,
			R_specification_part,
			R_specifier,
			R_statement,
			R_subscript_expression,
			R_subscript_list,
			R_switch_declaration,
			R_switch_identifier,
			R_switch_list,
			R_term,
			R_type,
			R_type_declaration,
			R_type_list,
			R_unconditional_statement,
			R_unlabelled_basic_statement,
			R_unsigned_number,
			R_upper_bound,
			R_value_part,
			R_variable,
			R_variableOrFunction_,
			R_variable_identifier,
			R_Last
		};
		SynTree(quint16 r = Tok_Invalid, const Token& = Token() );
		SynTree(const Token& t ):d_tok(t){}
		~SynTree() { foreach(SynTree* n, d_children) delete n; }

		static const char* rToStr( quint16 r );

		Alg::Token d_tok;
		QList<SynTree*> d_children;
	};

}
#endif // __ALG_SYNTREE__
