// This file was automatically generated by EbnfStudio; don't modify it!
#include "AlgTokenType.h"

namespace Alg {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_BangEq: return "!=";
			case Tok_Percent: return "%";
			case Tok_Amp: return "&";
			case Tok_Lpar: return "(";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_2Star: return "**";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_MinusGt: return "->";
			case Tok_Slash: return "/";
			case Tok_Colon: return ":";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Lt: return "<";
			case Tok_Leq: return "<=";
			case Tok_LtGt: return "<>";
			case Tok_Eq: return "=";
			case Tok_2Eq: return "==";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_HatEq: return "^=";
			case Tok_Bar: return "|";
			case Tok_Unot: return "¬";
			case Tok_Umul: return "×";
			case Tok_Udiv: return "÷";
			case Tok_Uexp: return "↑";
			case Tok_Uand: return "∧";
			case Tok_Uor: return "∨";
			case Tok_Uneq: return "≠";
			case Tok_Ueq: return "≡";
			case Tok_Uleq: return "≤";
			case Tok_Ugeq: return "≥";
			case Tok_Uimpl: return "⊃";
			case Tok_AND: return "AND";
			case Tok_ARRAY: return "ARRAY";
			case Tok_BEGIN: return "BEGIN";
			case Tok_BOOLEAN: return "BOOLEAN";
			case Tok_COMMENT: return "COMMENT";
			case Tok_DIV: return "DIV";
			case Tok_DO: return "DO";
			case Tok_ELSE: return "ELSE";
			case Tok_END: return "END";
			case Tok_EQUAL: return "EQUAL";
			case Tok_EQUIV: return "EQUIV";
			case Tok_FALSE: return "FALSE";
			case Tok_FOR: return "FOR";
			case Tok_GO: return "GO";
			case Tok_GOTO: return "GOTO";
			case Tok_GREATER: return "GREATER";
			case Tok_IF: return "IF";
			case Tok_IMPL: return "IMPL";
			case Tok_INTEGER: return "INTEGER";
			case Tok_LABEL: return "LABEL";
			case Tok_LESS: return "LESS";
			case Tok_MOD: return "MOD";
			case Tok_NOT: return "NOT";
			case Tok_NOTEQUAL: return "NOTEQUAL";
			case Tok_NOTGREATER: return "NOTGREATER";
			case Tok_NOTLESS: return "NOTLESS";
			case Tok_OR: return "OR";
			case Tok_OWN: return "OWN";
			case Tok_POWER: return "POWER";
			case Tok_PROCEDURE: return "PROCEDURE";
			case Tok_REAL: return "REAL";
			case Tok_STEP: return "STEP";
			case Tok_STRING: return "STRING";
			case Tok_SWITCH: return "SWITCH";
			case Tok_THEN: return "THEN";
			case Tok_TO: return "TO";
			case Tok_TRUE: return "TRUE";
			case Tok_UNTIL: return "UNTIL";
			case Tok_VALUE: return "VALUE";
			case Tok_WHILE: return "WHILE";
			case Tok_decimal_number: return "decimal_number";
			case Tok_unsigned_integer: return "unsigned_integer";
			case Tok_string: return "string";
			case Tok_identifier: return "identifier";
			case Tok_basic_symbol: return "basic_symbol";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_BangEq: return "Tok_BangEq";
			case Tok_Percent: return "Tok_Percent";
			case Tok_Amp: return "Tok_Amp";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_2Star: return "Tok_2Star";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_MinusGt: return "Tok_MinusGt";
			case Tok_Slash: return "Tok_Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Lt: return "Tok_Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_LtGt: return "Tok_LtGt";
			case Tok_Eq: return "Tok_Eq";
			case Tok_2Eq: return "Tok_2Eq";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_HatEq: return "Tok_HatEq";
			case Tok_Bar: return "Tok_Bar";
			case Tok_Unot: return "Tok_Unot";
			case Tok_Umul: return "Tok_Umul";
			case Tok_Udiv: return "Tok_Udiv";
			case Tok_Uexp: return "Tok_Uexp";
			case Tok_Uand: return "Tok_Uand";
			case Tok_Uor: return "Tok_Uor";
			case Tok_Uneq: return "Tok_Uneq";
			case Tok_Ueq: return "Tok_Ueq";
			case Tok_Uleq: return "Tok_Uleq";
			case Tok_Ugeq: return "Tok_Ugeq";
			case Tok_Uimpl: return "Tok_Uimpl";
			case Tok_AND: return "Tok_AND";
			case Tok_ARRAY: return "Tok_ARRAY";
			case Tok_BEGIN: return "Tok_BEGIN";
			case Tok_BOOLEAN: return "Tok_BOOLEAN";
			case Tok_COMMENT: return "Tok_COMMENT";
			case Tok_DIV: return "Tok_DIV";
			case Tok_DO: return "Tok_DO";
			case Tok_ELSE: return "Tok_ELSE";
			case Tok_END: return "Tok_END";
			case Tok_EQUAL: return "Tok_EQUAL";
			case Tok_EQUIV: return "Tok_EQUIV";
			case Tok_FALSE: return "Tok_FALSE";
			case Tok_FOR: return "Tok_FOR";
			case Tok_GO: return "Tok_GO";
			case Tok_GOTO: return "Tok_GOTO";
			case Tok_GREATER: return "Tok_GREATER";
			case Tok_IF: return "Tok_IF";
			case Tok_IMPL: return "Tok_IMPL";
			case Tok_INTEGER: return "Tok_INTEGER";
			case Tok_LABEL: return "Tok_LABEL";
			case Tok_LESS: return "Tok_LESS";
			case Tok_MOD: return "Tok_MOD";
			case Tok_NOT: return "Tok_NOT";
			case Tok_NOTEQUAL: return "Tok_NOTEQUAL";
			case Tok_NOTGREATER: return "Tok_NOTGREATER";
			case Tok_NOTLESS: return "Tok_NOTLESS";
			case Tok_OR: return "Tok_OR";
			case Tok_OWN: return "Tok_OWN";
			case Tok_POWER: return "Tok_POWER";
			case Tok_PROCEDURE: return "Tok_PROCEDURE";
			case Tok_REAL: return "Tok_REAL";
			case Tok_STEP: return "Tok_STEP";
			case Tok_STRING: return "Tok_STRING";
			case Tok_SWITCH: return "Tok_SWITCH";
			case Tok_THEN: return "Tok_THEN";
			case Tok_TO: return "Tok_TO";
			case Tok_TRUE: return "Tok_TRUE";
			case Tok_UNTIL: return "Tok_UNTIL";
			case Tok_VALUE: return "Tok_VALUE";
			case Tok_WHILE: return "Tok_WHILE";
			case Tok_decimal_number: return "Tok_decimal_number";
			case Tok_unsigned_integer: return "Tok_unsigned_integer";
			case Tok_string: return "Tok_string";
			case Tok_identifier: return "Tok_identifier";
			case Tok_basic_symbol: return "Tok_basic_symbol";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			if( at(str,i+1) == '=' ){
				res = Tok_BangEq; i += 2;
			} else {
				res = Tok_Bang; i += 1;
			}
			break;
		case '%':
			res = Tok_Percent; i += 1;
			break;
		case '&':
			res = Tok_Amp; i += 1;
			break;
		case '(':
			res = Tok_Lpar; i += 1;
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			if( at(str,i+1) == '*' ){
				res = Tok_2Star; i += 2;
			} else {
				res = Tok_Star; i += 1;
			}
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '>' ){
				res = Tok_MinusGt; i += 2;
			} else {
				res = Tok_Minus; i += 1;
			}
			break;
		case '/':
			res = Tok_Slash; i += 1;
			break;
		case ':':
			if( at(str,i+1) == '=' ){
				res = Tok_ColonEq; i += 2;
			} else {
				res = Tok_Colon; i += 1;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '<':
			switch( at(str,i+1) ){
			case '=':
				res = Tok_Leq; i += 2;
				break;
			case '>':
				res = Tok_LtGt; i += 2;
				break;
			default:
				res = Tok_Lt; i += 1;
				break;
			}
			break;
		case '=':
			if( at(str,i+1) == '=' ){
				res = Tok_2Eq; i += 2;
			} else {
				res = Tok_Eq; i += 1;
			}
			break;
		case '>':
			if( at(str,i+1) == '=' ){
				res = Tok_Geq; i += 2;
			} else {
				res = Tok_Gt; i += 1;
			}
			break;
		case 'A':
			switch( at(str,i+1) ){
			case 'N':
				if( at(str,i+2) == 'D' ){
					res = Tok_AND; i += 3;
				}
				break;
			case 'R':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'Y' ){
							res = Tok_ARRAY; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'B':
			switch( at(str,i+1) ){
			case 'E':
				if( at(str,i+2) == 'G' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							res = Tok_BEGIN; i += 5;
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'N' ){
									res = Tok_BOOLEAN; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'C':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'M' ){
					if( at(str,i+3) == 'M' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'T' ){
									res = Tok_COMMENT; i += 7;
								}
							}
						}
					}
				}
			}
			break;
		case 'D':
			switch( at(str,i+1) ){
			case 'I':
				if( at(str,i+2) == 'V' ){
					res = Tok_DIV; i += 3;
				}
				break;
			case 'O':
				res = Tok_DO; i += 2;
				break;
			}
			break;
		case 'E':
			switch( at(str,i+1) ){
			case 'L':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_ELSE; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,i+2) == 'D' ){
					res = Tok_END; i += 3;
				}
				break;
			case 'Q':
				if( at(str,i+2) == 'U' ){
					switch( at(str,i+3) ){
					case 'A':
						if( at(str,i+4) == 'L' ){
							res = Tok_EQUAL; i += 5;
						}
						break;
					case 'I':
						if( at(str,i+4) == 'V' ){
							res = Tok_EQUIV; i += 5;
						}
						break;
					}
				}
				break;
			}
			break;
		case 'F':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'E' ){
							res = Tok_FALSE; i += 5;
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'R' ){
					res = Tok_FOR; i += 3;
				}
				break;
			}
			break;
		case 'G':
			switch( at(str,i+1) ){
			case 'O':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'O' ){
						res = Tok_GOTO; i += 4;
					}
				} else {
					res = Tok_GO; i += 2;
				}
				break;
			case 'R':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'R' ){
									res = Tok_GREATER; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'I':
			switch( at(str,i+1) ){
			case 'F':
				res = Tok_IF; i += 2;
				break;
			case 'M':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'L' ){
						res = Tok_IMPL; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'G' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'R' ){
									res = Tok_INTEGER; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'L':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'B' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'L' ){
							res = Tok_LABEL; i += 5;
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'S' ){
						res = Tok_LESS; i += 4;
					}
				}
				break;
			}
			break;
		case 'M':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'D' ){
					res = Tok_MOD; i += 3;
				}
			}
			break;
		case 'N':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'T' ){
					switch( at(str,i+3) ){
					case 'E':
						if( at(str,i+4) == 'Q' ){
							if( at(str,i+5) == 'U' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'L' ){
										res = Tok_NOTEQUAL; i += 8;
									}
								}
							}
						}
						break;
					case 'G':
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'T' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == 'R' ){
												res = Tok_NOTGREATER; i += 10;
											}
										}
									}
								}
							}
						}
						break;
					case 'L':
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'S' ){
								if( at(str,i+6) == 'S' ){
									res = Tok_NOTLESS; i += 7;
								}
							}
						}
						break;
					default:
						res = Tok_NOT; i += 3;
						break;
					}
				}
			}
			break;
		case 'O':
			switch( at(str,i+1) ){
			case 'R':
				res = Tok_OR; i += 2;
				break;
			case 'W':
				if( at(str,i+2) == 'N' ){
					res = Tok_OWN; i += 3;
				}
				break;
			}
			break;
		case 'P':
			switch( at(str,i+1) ){
			case 'O':
				if( at(str,i+2) == 'W' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							res = Tok_POWER; i += 5;
						}
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'C' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'U' ){
									if( at(str,i+7) == 'R' ){
										if( at(str,i+8) == 'E' ){
											res = Tok_PROCEDURE; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'R':
			if( at(str,i+1) == 'E' ){
				if( at(str,i+2) == 'A' ){
					if( at(str,i+3) == 'L' ){
						res = Tok_REAL; i += 4;
					}
				}
			}
			break;
		case 'S':
			switch( at(str,i+1) ){
			case 'T':
				switch( at(str,i+2) ){
				case 'E':
					if( at(str,i+3) == 'P' ){
						res = Tok_STEP; i += 4;
					}
					break;
				case 'R':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'G' ){
								res = Tok_STRING; i += 6;
							}
						}
					}
					break;
				}
				break;
			case 'W':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'H' ){
								res = Tok_SWITCH; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'T':
			switch( at(str,i+1) ){
			case 'H':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'N' ){
						res = Tok_THEN; i += 4;
					}
				}
				break;
			case 'O':
				res = Tok_TO; i += 2;
				break;
			case 'R':
				if( at(str,i+2) == 'U' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_TRUE; i += 4;
					}
				}
				break;
			}
			break;
		case 'U':
			if( at(str,i+1) == 'N' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'L' ){
							res = Tok_UNTIL; i += 5;
						}
					}
				}
			}
			break;
		case 'V':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'E' ){
							res = Tok_VALUE; i += 5;
						}
					}
				}
			}
			break;
		case 'W':
			if( at(str,i+1) == 'H' ){
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'E' ){
							res = Tok_WHILE; i += 5;
						}
					}
				}
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			if( at(str,i+1) == '=' ){
				res = Tok_HatEq; i += 2;
			} else {
				res = Tok_Hat; i += 1;
			}
			break;
		case '|':
			res = Tok_Bar; i += 1;
			break;
		case '¬':
			res = Tok_Unot; i += 1;
			break;
		case '×':
			res = Tok_Umul; i += 1;
			break;
		case '÷':
			res = Tok_Udiv; i += 1;
			break;
		case '↑':
			res = Tok_Uexp; i += 1;
			break;
		case '∧':
			res = Tok_Uand; i += 1;
			break;
		case '∨':
			res = Tok_Uor; i += 1;
			break;
		case '≠':
			res = Tok_Uneq; i += 1;
			break;
		case '≡':
			res = Tok_Ueq; i += 1;
			break;
		case '≤':
			res = Tok_Uleq; i += 1;
			break;
		case '≥':
			res = Tok_Ugeq; i += 1;
			break;
		case '⊃':
			res = Tok_Uimpl; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
